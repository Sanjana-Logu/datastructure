#include <stdio.h>
#include <stdlib.h>
typedef struct Node 
{
    int value;                
    struct Node* left;        
    struct Node* right;      
} 
Node;
Node* createNode(int value) 
{
    Node* newNode = (Node*)malloc(sizeof(Node)); 
    if (newNode == NULL) 
    {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->value = value;  
    newNode->left = NULL;   
    newNode->right = NULL;  
    return newNode;
}
Node* insertNode(Node* root, int value) 
{
    if (root == NULL) 
    {
        return createNode(value);
    }
    if (value < root->value) 
    {
        root->left = insertNode(root->left, value);
    } else 
    {
        root->right = insertNode(root->right, value);
    }
    return root;
}
void printInOrder(Node* root) 
{
    if (root != NULL) 
    {
        printInOrder(root->left); 
        printf("%d ", root->value); 
        printInOrder(root->right); 
    }
}
void freeTree(Node* root) 
{
    if (root != NULL) 
    {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}
int main() 
{
    Node* root = NULL; 
    root = insertNode(root, 50);
    insertNode(root, 30);
    insertNode(root, 70);
    insertNode(root, 20);
    insertNode(root, 40);
    insertNode(root, 60);
    insertNode(root, 80);
    printf("In-order traversal of the binary search tree:\n");
    printInOrder(root);
    printf("\n");
    freeTree(root);
    return 0;
}
