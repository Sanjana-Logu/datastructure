void merge(int *arr, int left, int middle, int right)
{
    int start2 = middle + 1;
    int value, idx;

    if (arr[middle] <= arr[start2])
        return;
    
    while (left <= middle && start2 <= right) {
        if (arr[left] <= arr[start2])
            left++;
        else {
            value = arr[start2];
            idx = start2;

            while (idx != left) {
                arr[idx] = arr[idx - 1];
                idx--;
            }

            arr[idx] = value;

            left++;
            middle++;
            start2++;
        }
    }
}

void mergeSort(int *arr, int left, int right)
{
    int middle;

    if (left < right) {
        middle = left + (right - left) / 2;

        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);
        merge(arr, left, middle, right);
    }
}

int triangleNumber(int* nums, int numsSize){
    int left, middle, right;
    int combinations = 0;
    register int i, j;

    mergeSort(nums, 0, numsSize - 1);

    for (i = 0; i < numsSize - 2; i++)
        for (j = i + 1; j < numsSize - 1; j++) {
            left = j + 1;
            right = numsSize - 1;

            while (left <= right) {
                middle = left + (right - left) / 2;

                if (nums[i] + nums[j] <= nums[middle])
                    right = middle - 1;
                else
                    left = middle + 1;
            }

            if (right > j)
                combinations += right - j;
        }

    return combinations;
}
